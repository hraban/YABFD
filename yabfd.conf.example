# Demonstration configuration file for pyBFD.

[blacklist]
# Configuration directives for the blacklisting process in general.
#
# Number of failed login attempts after which to blacklist an IP.
# Default is five.
;threshold = 5
# Whitelist file (hosts listed in this file are never blacklisted). 
;ignore = whitelist.txt
# Log in which yabfd keeps track of bans across different runs.
backlog = backlog.txt
# Number of days to ban bruteforcers. Default is one week.
;bantime = 7

[parser_syslog]
# Sample parser using regular expressions.
#
# The type of parser (all available parsers are in the parser/ dir).
parser_type = regexpparser
# The regular expression itself. Currently the `host' group is used to
# extract the bruteforcing host from the match.
regexp_1 = ^(?P<date>\S+ +\S+) \S+ \S+ sshd\[\d+\]: Failed password for .* from (?P<host>\S+) port \d+ ssh2?$
# You can specify as many regular expressions as you want:
;regexp_2 = 
;regexp_3 =
# Format of the date string matched by the above regular expression
# (passed to time.strptime()). See
# <https://0brg.net/doc/Python-Docs-2.5/lib/module-time.html> for more
# information on the meaning of this string. Note that, because of the
# syntax of this configuration file, literal percentage signs (%) must
# be padded (i.e.: %%). Note that if the date fails to parse it will be
# assumed to be a hit (i.e.: rather false positive than false negative).
datefrmt = %%b %%d
# This an ugly hack, just in case the parsed time does not provide
# enough information (as is the case with syslog.. blegh). This line of
# python code is executed after parsing the date (date is the name of
# the variable, a datetime.date() object). You can use it to tailor the
# date to your needs. The datetime and time modules are imported.
# This example sets the year to the current year.
datemodif: date = date.replace(year=datetime.datetime.today().year)
# Space-seperated list of logfiles to match the regular expression on.
logfiles = /var/log/auth.log /var/log/auth.log.1

[parser_mybanlist]
# Sample parser for a custom blacklist.
#
parser_type = customblacklist
# The CSV file in which all custom bans are listed. Syntax of the file
# is two-element CSV: host,date. Date must be in YYYY-MM-DD form.  The
# date is interpreted as if it were the date of this host's latest
# "offense". In other words, it will cause a host to be banned until the
# listed date + the blacklist's bantime. An optional third element in
# the entry is a weight-factor (host,date,weight).
blacklist = myblacklist.csv
# This value influences the default weight of being listed in the
# blacklist.  Setting this lower than the blacklist's threshold means
# that being listed here will not cause a ban in itself. The default is
# a pretty large value.
;hitweight = 99999

[printer_hostsdeny]
# Sample printer that lists every bad host on a seperate line in a file.
#
# The type of printer (all available printers are in the printer/ dir).
printer_type = simplelist
# The file to store the bad hosts to. Use - for stdout.
destfile = /etc/hosts.deny.yabfd
# The line-ending to use.
newline = \n

[printer_mediawikilist]
# Sample printer for a mediawiki-formatted list.
#
# A formattedlist printer is much like a simplelist printer, with one
# added feature: you can define your own string formatting for the
# output.
printer_type = formattedlist
destfile = /tmp/list.wiki
newline = \n
# The available keys are: %(host)s (the host) and %(till)s (until what
# time the host is banned). As with datefrmt, escape the %.
format = * %%(host)s is banned until %%(till)s.
# This will give you a line like this for every host:
# * 12.34.56.78 is banned until 2036-12-31.
